knitr::opts_chunk$set(echo = TRUE)
abline(-24,0.1618981)
plot(abline(-24,0.1618981))
plot()
return(-24+0.1618981*n)}
HarvestWolf=function(n){
return(-24+0.1618981*n)}
HWolf=function(n){
return(-24+0.1618981*n)}
HWolf(1100)
HWolf=function(n){
return(int(-24+0.1618981*n))}
HWolf(1100)
HWolf=function(n){
return(as.integer(-24+0.1618981*n))}
HWolf(1100)
HWolf=function(n){
if n>149{
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(1100)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(110)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(1100)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(100)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(100)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(1000)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(2000)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(7000)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(3000)
HWolf(1000)
HWolf(1001)
HWolf(1002)
HWolf(1003)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(1100)
HWolf=function(n){
if (n>149){
return(as.integer(-24+0.1618981*n))}
else {return(0)}}
HWolf(868)
rgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
dgamma(1.0E-6, 1.0E-6)
knitr::opts_chunk$set(echo = TRUE)
library(R2jags)
library(tidyverse)
harvest <- c(0,0,0,0,0,1,0,0,2,1,2,0,0,1,0,4,4,6,18,36,34,42,51,98,105,103,169)
```{r}
CMR <- c(17.1,35.4,
47.7,
25.1,
62.6,
47.9,
81.7,
110.5,
102.7,
135.9,
132.6,
101.7,
130.3,
141.4,
141.5,
175.5,
210.3,
174.5,
353.6,
280.2,
376.7,
561.2,
571.9,
682.4,
645.7,
783.8,
868)
thedata <- cbind(round(CMR), harvest)
colnames(thedata) <- c("N", "H")
thedata <- as.data.frame(thedata)
nyears <- nrow(thedata)
model <- function(){
# Priors
sigmaProc ~ dunif(0, 10)
tauProc <- 1/sigmaProc^2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
mu[t] <- lambda * (N[t-1] - harvest[t-1])
Nproc[t] <- log(max(1, mu[t]))
N[t] ~ dlnorm(Nproc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data <- list(
nyears = nrow(thedata),
y = round(thedata$N),
harvest = thedata$H)
bugs.monitor <- c("lambda", "sigmaProc","N", "tauProc")
bugs.chains <- 3
bugs.inits <- function(){
list(
)
}
library(R2jags)
wolf_mod <- jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model,
n.chains = bugs.chains,
n.thin = 10,
n.iter = 100000,
n.burnin = 50000)
wolf_mod$BUGSoutput$sims.matrix %>%
as_tibble() %>%
#  pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
#  filter(str_detect(parameter, "lambda")) %>%
ggplot() +
aes(x = lambda) +
geom_density() +
geom_vline(xintercept = 1, lty = "dashed", color = "red") +
labs(x = "Taux de croissance")
wolf_mod$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lci = quantile(value, probs = 2.5/100),
uci = quantile(value, probs = 97.5/100)) %>%
mutate(an = parse_number(parameter) + 1994) %>%
arrange(an) %>%
ggplot() +
geom_ribbon(aes(x = an, y = medianN, ymin = lci, ymax = uci), fill = "red", alpha = 0.3) +
geom_line(aes(x = an, y = medianN), lty = "dashed", color = "red") +
#  geom_point(aes(x = an, y = medianN), color = "red") +
geom_point(data = bugs.data %>% as_tibble, aes(x = 1994 + 1:unique(nyears), y = y)) +
labs(y = "Effectifs de loups",
x = "Années",
title = "Projections")
ggplot() +
geom_point(aes(x = CMR, y = harvest), color = "black")  +
expand_limits(x = 0, y = 0) +
labs(x = "Number of wolves (year t - 1)",
y = "Wolf quota (year t)")
model1 <- function(){
# Priors
sigmaProc ~ dunif(0, 4)
tauProc <- 1/sigmaProc^2
b[1] ~ dnorm(0, 3)
# Process model
for (t in 1:(nyears)) {
mu[t] <- log(b[1] * y[t])
Hproc[t] <- max(0, mu[t])
H[t] ~ dlnorm(Hproc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
q[t] ~ dpois(H[t])
}
}
bugs.data <- list(
nyears = 27,
y = CMR,
q = harvest)
bugs.monitor <- c("b", "sigmaProc","H")
bugs.chains <- 3
bugs.inits <- function(){
list(
)
}
mod1 <- jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model1,
n.chains = bugs.chains,
n.thin = 10,
n.iter = 100000,
n.burnin = 50000)
mod1$BUGSoutput$mean$b
grid <- seq(0, 900, length.out = length(CMR))
ggplot() +
geom_point(aes(x = CMR, y = harvest), color = "black") +
geom_line(aes(x = grid, y = mod1$BUGSoutput$mean$b * grid), color = "black", lty = "dashed") +
expand_limits(x = 0, y = 0) +
labs(x = "Number wolves (year t - 1)",
y = "Wolf quota (year t)")
grid <- seq(0, 900, length.out = length(CMR))
ggplot() +
geom_point(aes(x = CMR, y = harvest), color = "black") +
geom_line(aes(x = grid, y = mod1$BUGSoutput$mean$b * grid), color = "black", lty = "dashed") +
expand_limits(x = 0, y = 0) +
labs(x = "Number wolves (year t - 1)",
y = "Wolf quota (year t)")
model2 <- function(){
# Priors
sigmaProc ~ dunif(0, 4)
tauProc <- 1/sigmaProc^2
b[1] ~ dnorm(0, 1/3000)
b[2] ~ dnorm(0, 1/3000)
# Process model
for (t in 1:(nyears)) {
mu[t] <- log(b[1] + b[2] * y[t])
#    mu[t] <- log(b[1] + b[2] * y[t]) * index[t]
#    index[t] <- - 1000 * step(y[t] + b[1] / b[2]) # step(x) = 1 if x >= 0
#    index[t] <- step(q[t]) # step(x) = 1 if x >= 0
#    mu[t] <- log(b[1] + b[2] * y[t])
Hproc[t] <- max(0, mu[t])
H[t] ~ dlnorm(Hproc[t], tauProc)
# les lignes de code suivantes donnent un ajustement pas mal, mais
# sauf qu'à l'approche de census == 0 on a harvest == 0
#    Hproc[t] <- log(b[1] + b[2] * y[t])
#    H[t] ~ dlnorm(Hproc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
q[t] ~ dpois(H[t])
}
}
bugs.data <- list(
nyears = 27,
y = CMR,
q = harvest)
bugs.monitor <- c("b", "sigmaProc")
bugs.chains <- 3
bugs.inits <- function(){
list(
)
}
mod2 <- jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model2,
n.chains = bugs.chains,
n.thin = 10,
n.iter = 100000,
n.burnin = 50000)
print(mod2, intervals = c(2.5/100, 50/100, 97.5/100))
mod2$BUGSoutput$mean$b
- mod2$BUGSoutput$mean$b[1] / mod2$BUGSoutput$mean$b[2]
grid <- seq(0, 900, length.out = length(CMR))
treshold = - mod2$BUGSoutput$mean$b[1] / mod2$BUGSoutput$mean$b[2]
ggplot() +
geom_point(aes(x = CMR, y = harvest), color = "black") +
geom_line(aes(x = grid, y = mod1$BUGSoutput$mean$b * grid), color = "black", lty = "dashed") +
geom_line(aes(x = grid, y = if_else(grid < treshold, 0, (mod2$BUGSoutput$mean$b[1] +  mod2$BUGSoutput$mean$b[2] * grid))), color = "black") +
expand_limits(x = 0, y = 0) +
labs(x = "Number of wolves (year t - 1)",
y = "Wolf quota (year t)")
source("~/Downloads/Re_ ARM/Supplement_Null Models for Adaptive Management.R", echo=TRUE)
