se
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = se
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
#tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = se
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se = c(se,100)
se
se
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se
se$se
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
#tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se$se = c(se$se,100)
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se
se$se[26]
se$se[27]
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
se$se[27] = 100
ObsSE = rep(0.3, 27)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
dat <- cbind(round(CMR), ObsSE, harvest)
colnames(dat) <- c("N", "se", "H")
dat <- as.data.frame(dat)
nyears <- nrow(dat)
dat
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
#tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
#tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
#tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H#,
# sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
#tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
print(wolf_modelexp, intervals = c(2.5/100, 50/100, 97.5/100))
se
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
#  tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H#,sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
#tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
