# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
# Projected model
for (t in (nyears + 1):(nyears + 2)) {
mu[t] = (lambda - dH) * N[t - 1]
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
dH = dH[i],
h = dat$H)
bugs.data$y[28] = NA
bugs.data$y[29] = NA
# Lancement du modèle
wolf_modelexp = jags(data = bugs.data,
inits = bugs.initsexp,
parameters.to.save = bugs.monitorexp,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
dH = dH[i],
h = dat$H)
bugs.data$y[28] = NA
bugs.data$y[29] = NA
# Lancement du modèle
wolf_modelexp = jags(data = bugs.data,
inits = bugs.initsexp,
parameters.to.save = bugs.monitorexp,
model.file = modelexpproj2,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
output = output1 %>% left_join(output2) %>%
left_join(output3) %>%
left_join(output4) %>%
pivot_longer(
c(medianN1, medianN2, medianN3, medianN4),
names_to = "medianN",
values_to = "valuesM")
variable_names <- list(
"medianN1" = "Harvest : 0%" ,
"medianN2" = "Harvest : 10%",
"medianN3" = "Harvest : 20%",
"medianN4" = "Harvest : 30%")
variable_labeller <- function(variable, value) {
return(variable_names[value])
}
ggplot(output)+
geom_point(aes(x = years, y = ObsY)) +
coord_cartesian(xlim=c(1996,2023),ylim=c(0,1250))+
aes(x = years, y = valuesM)+
geom_line(colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq1, ymax = hq1), fill = "red", alpha = 0.3)+
facet_wrap(~medianN,labeller = variable_labeller)+
theme_bw()+
labs(title = "Estimated and projected population size for each harest rate",
x = "Years",
y = "Number of wolves")
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(nyears = nrow(dat),
y = dat$N,
h = dat$H)
bugs.monitorlogi = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.initslogi = list(init1, init2, init3)
library(R2jags)
wolf_modellogist = jags(data = bugs.data,
inits = bugs.initslogi,
parameters.to.save = bugs.monitorlogi,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
print(wolf_modellogist, intervals = c(2.5/100, 50/100, 97.5/100))
wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = dat$N)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
modellogistproj2 = function() {
# Priors
sigmaProc ~ dunif (0, 5)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
#Projected population
for (t in (nyears+1):(nyears+2)) {
u[t-1] = (1-dH) * N[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
dH = c(0, 0.10, 0.20, 0.30)
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nrow(dat),
y = c(dat$Nrep(NA,2)),
dH = dH[i],
h = dat$H)
# Lancement du modèle
wolf_modellogist = jags(data = bugs.data,
inits = bugs.initslogi,
parameters.to.save = bugs.monitorlogi,
model.file = modellogistproj2,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nrow(dat),
y = c(dat$N,rep(NA,2)),
dH = dH[i],
h = dat$H)
# Lancement du modèle
wolf_modellogist = jags(data = bugs.data,
inits = bugs.initslogi,
parameters.to.save = bugs.monitorlogi,
model.file = modellogistproj2,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
output = output1 %>% left_join(output2) %>%
left_join(output3) %>%
left_join(output4) %>%
pivot_longer(
c(medianN1, medianN2, medianN3, medianN4),
names_to = "medianN",
values_to = "valuesM")
variable_names <- list(
"medianN1" = "Harvest : 0%" ,
"medianN2" = "Harvest : 10%",
"medianN3" = "Harvest : 20%",
"medianN4" = "Harvest : 30%")
variable_labeller <- function(variable, value) {
return(variable_names[value])
}
ggplot(output)+
geom_point(aes(x = years, y = ObsY)) +
coord_cartesian(xlim=c(1996,2023),ylim=c(0,1250))+
aes(x = years, y = valuesM)+
geom_line(colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq1, ymax = hq1), fill = "red", alpha = 0.3)+
facet_wrap(~medianN,labeller = variable_labeller)+
theme_bw()+
labs(title = "Estimated and projected population size for each harest rate",
x = "Years",
y = "Number of wolves")
DICexp=numeric(nrow(dat)-10)
DIClogist=numeric(nrow(dat)-10)
library(R2jags)
for (i in 10:nrow(dat)){
# Initialisation des données :
bugs.data = list(nyears = i,
y = dat$N[1:i],
h = dat$H[1:i])
# Modèle exponentiel
#On lance la machine
wolf_modelexp = jags(data = bugs.data,
inits = bugs.initsexp,
parameters.to.save = bugs.monitorexp,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
# Enregistrement du DIC
DICexp[i-9]=wolf_modelexp$BUGSoutput$DIC
# Modèle logistique
# On lance la machine
wolf_modellogist = jags(data = bugs.data,
inits = bugs.initslogi,
parameters.to.save = bugs.monitorlogi,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
# Enregistrement du DIC
DIClogist[i-9]=wolf_modellogist$BUGSoutput$DIC
}
DICexp=numeric(nrow(dat)-10)
DIClogist=numeric(nrow(dat)-10)
library(R2jags)
for (i in 10:nrow(dat)){
# Initialisation des données :
bugs.data = list(nyears = i,
y = dat$N[1:i],
h = dat$H[1:i])
# Modèle exponentiel
#On lance la machine
wolf_modelexp = jags(data = bugs.data,
inits = bugs.initsexp,
parameters.to.save = bugs.monitorexp,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=50000,
n.burnin=10000)
# Enregistrement du DIC
DICexp[i-9]=wolf_modelexp$BUGSoutput$DIC
# Modèle logistique
# On lance la machine
wolf_modellogist = jags(data = bugs.data,
inits = bugs.initslogi,
parameters.to.save = bugs.monitorlogi,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
# Enregistrement du DIC
DIClogist[i-9]=wolf_modellogist$BUGSoutput$DIC
}
# DICexp
# DIClogist
ggplot()+
geom_point(aes(x=seq(10,27),y=DICexp),colour="blue")+
geom_point(aes(x=seq(10,27),y=DIClogist),colour="red")+
labs(x="Years", y="DIC")+
theme_bw()
nyears = 27
N1 = 30
sigma = 0.15
lambda=1.15
ssm_sim1 <- data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim1$N[1] = N1
for (t in 1:(nyears-1)){
ssm_sim1$N[t+1] <- round(rnorm(1,ssm_sim1$N[t] * lambda,sigma))
}
for (t in 1:nyears){
ssm_sim1$y[t]=rpois(1,ssm_sim1$N[t])
}
ggplot(ssm_sim1, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
bugs.data = list(nyears = nrow(ssm_sim1)+20,
y = c(ssm_sim1$y,rep(NA,20)))
