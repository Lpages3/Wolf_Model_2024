n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
# Enregistrement du DIC
DICexp[i-9]=wolf_modelexp$BUGSoutput$DIC
# Modèle logistique
# Paramètres JAGS
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
# On lance la machine
wolf_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
# Enregistrement du DIC
DIClogist[i-9]=wolf_modellogist$BUGSoutput$DIC
}
# DICexp
# DIClogist
ggplot()+
geom_point(aes(x=seq(10,27),y=DICexp),colour="blue")+
geom_point(aes(x=seq(10,27),y=DIClogist),colour="red")+
labs(x="Years", y="DIC")+
theme_bw()
nyears = 27
N1 = 30
sigma = 0.15
lambda=1.15
ssm_sim1 <- data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim1$N[1] = N1
for (t in 1:(nyears-1)){
ssm_sim1$N[t+1] <- round(rnorm(1,ssm_sim1$N[t] * lambda,sigma))
}
for (t in 1:nyears){
ssm_sim1$y[t]=rpois(1,ssm_sim1$N[t])
}
ggplot(ssm_sim1, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / (sigmaProc ^ 2)
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
mu[t] = lambda * N[t-1]
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(nyears = nrow(ssm_sim1)+20,
y = c(ssm_sim1$y,rep(NA,20)))
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
library(R2jags)
sim_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
sim_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2040),ylim=c(0,1500))+
theme_bw()+
labs(title = "Estimated and projected population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
nyears = 27
N1 = 30
sigma = 0.15
K = 800
alpha = 0.2
ssm_sim2 = data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim2$N[1] = N1
for (t in 1:(nyears-1)){
Er = exp(alpha * (1 - ssm_sim2$N[t] / K)) * ssm_sim2$N[t]
ssm_sim2$N[t+1] = rpois(1,Er)
}
for (t in 1:nyears){
ssm_sim2$y[t]=rpois(1,ssm_sim2$N[t])
}
ggplot(ssm_sim2, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
Er[t-1] = exp(alpha * (1 - N[t-1] / K))
lambda[t-1] = N[t-1] * Er[t-1]
N[t] ~ dpois(lambda[t-1])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(nyears = nrow(ssm_sim2)+20,
y = c(ssm_sim2$y,rep(NA,20)))
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "lambda", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
library(R2jags)
sim_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
sim_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2040))+
theme_bw()+
labs(title = "Estimated and projected population size",
subtitle = "with observed population size (black dots)",
x = "Years",
y = "Number of wolves")
nyears = 27
N1 = 30
sigma = 0.15
lambda = 1.15
K = 800
alpha = 0.2
ssm_sim3 = data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim3$N[1] = N1
# Modèle exponentiel
for (t in 1:14){
ssm_sim3$N[t+1] = round(rnorm(1,ssm_sim3$N[t] * lambda,sigma))
}
for (t in 1:15){
ssm_sim3$y[t]=rpois(1,ssm_sim3$N[t])
}
# Modèle logistique
for (t in 15:nyears){
Er = exp(alpha * (1 - ssm_sim3$N[t-1] / K)) * ssm_sim3$N[t-1]
ssm_sim3$N[t] = rpois(1,Er)
}
for (t in 16:nyears){
ssm_sim3$y[t]=rpois(1,ssm_sim3$N[t])
}
ggplot(ssm_sim3, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears-20)) {
Er[t-1] = exp(alpha * (1 - N[t-1] / K))
lambda[t-1] = N[t-1] * Er[t-1]
N[t] ~ dpois(lambda[t-1])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
# Projection
for (t in (nyears-19):(nyears)) {
Er[t-1] = exp(alpha * (1 - N[t-1] / K))
lambda[t-1] = N[t-1] * Er[t-1]
N[t] ~ dpois(lambda[t-1])
}
}
bugs.data = list(nyears = nrow(ssm_sim3)+20,
y = c(ssm_sim3$y,rep(NA,20)))
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "lambda", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
library(R2jags)
sim_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=20000,
n.burnin=5000)
sim_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2040))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 5)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] * (1-dH)
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
#Projected population
for (t in (nyears+1):(nyears+5)) {
u[t-1] = (1-dH) * N[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
nyears = 25
N1 = 30
ssm_sim4 = data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim4$N[1] = N1
H = 0
sigma = 0.15
K = 800
alpha = 0.5
ite=0
tempH=c()
for (nyears in seq(5,nyears,5)) { # Boucle sur le nombre d'itérations
print(H)
ite=ite+1
tempH[ite]=H
if (nyears == 5) {
for (t in 1:(nyears - 1)) {
u = ssm_sim4$N[t]*(1-H)
Er = exp(alpha * (1 - u/ K)) * u
ssm_sim4$N[t+1] = rpois(1,Er)
}
}
if(nyears>5){
for (t in (nyears - 5):(nyears - 1)) {
u = ssm_sim4$N[t]*(1-H)
Er = exp(alpha * (1 - u/ K)) * u
ssm_sim4$N[t+1] = rpois(1,Er)
}
}
for (t in 1:nyears){
ssm_sim4$y[t]=rpois(1,ssm_sim4$N[t])
}
# Initialisation des données
bugs.data = list(nyears = nyears,
y = c(ssm_sim4$y[1:nyears],rep(NA,5)),
dH = H)
# Paramètres JAGS
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
# Lancement du modèle
wolf_modellogist = jags(
data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin = 10,
n.iter = 20000,
n.burnin = 5000
)
#print(wolf_modellogist, intervals = c(2.5/100, 50/100, 97.5/100))
# Calcul du taux de reproduction estimé
Nest = wolf_modellogist$BUGSoutput$median$N
l = length(Nest)
lamb = c()
for (t in 1:l-1) {
lamb[t] = Nest[t+1] / Nest[t]}
lambda = mean(lamb)
print(lambda)
if (lambda<1.2){H=0}
if(lambda>=1.2 & lambda<1.3){H=0.1}
if(lambda>=1.3 & lambda<1.4){H=0.2}
if(lambda>1.4){H=0.3}
print(H)
}
ggplot(ssm_sim4, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
tempH
wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter))%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1:unique(nyears+5), y = c(ssm_sim4$y,rep(NA,5)))) +
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
tempH
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / (sigmaProc ^ 2)
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] * (lambda-dH)
NProc[t] = log(max(1, u[t-1]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
#Projected population
for (t in (nyears+1):(nyears+5)) {
u[t-1] = N[t-1] * (lambda-dH)
NProc[t] = log(max(1, u[t-1]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
dH = c(0,10,20,30)/100
nyears = 25
N1 = 30
ssm_sim5 = data.frame(Year = 1:nyears,
y = numeric(nyears),
N = numeric(nyears))
ssm_sim5$N[1] = N1
H = 0
sigma = 0.15
ite = 0
tempH = c()
lambda = 1.2
for (nyears in seq(5, nyears, 5)) {
# Boucle sur le nombre d'années
print(nyears)
ite = ite + 1
tempH[ite] = H
if (nyears == 5) {
# Simulation des 5 premières années
for (t in 1:(nyears - 1)) {
u = ssm_sim5$N[t] * (lambda - H)
ssm_sim5$N[t + 1] = rpois(1, u)
}
}
if (nyears > 5) {
# Simulation des années suivantes, 5 par 5
for (t in (nyears - 5):(nyears - 1)) {
u = ssm_sim5$N[t] * (lambda - H)
ssm_sim5$N[t + 1] = rpois(1, u)
}
}
for (t in 1:nyears) {
# Simulation des données observées
ssm_sim5$y[t] = rpois(1, ssm_sim5$N[t])
}
# Initialisation des données
bugs.data = list(nyears = nyears,
y = c(ssm_sim5$y[1:nyears], rep(NA, 5)),
dH = H)
# Paramètres JAGS
bugs.monitor = c("sigmaProc", "tauProc", "lambda", "N")
bugs.chains = 3
bugs.inits = function() {
list()
}
# Lancement du modèle
wolf_modelexp = jags(
data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin = 10,
n.iter = 100000,
n.burnin = 50000
)
#print(wolf_modelexp, intervals = c(2.5 / 100, 50 / 100, 97.5 / 100))
# Taux de reproduction estimé
lambda = wolf_modelexp$BUGSoutput$median$lambda # lambda estimé sur une période les données observées + une période projeter sur 5 ans
print(lambda)
if (lambda<1.2){H=0}
if(lambda>=1.2 & lambda<1.3){H=0.1}
if(lambda>=1.3 & lambda<1.4){H=0.2}
if(lambda>1.4){H=0.3}
print(H)
}
ggplot(ssm_sim5, aes(x=Year))+
geom_point(aes(y=y),colour="red")+
geom_line(aes(y=N),colour="grey30")+
theme_bw()
tempH
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter))%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1:unique(nyears+5), y = c(ssm_sim5$y,rep(NA,5)))) +
coord_cartesian(ylim=c(0,1500))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
