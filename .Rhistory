summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_cto = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
print(wolf_modelexp, intervals = c(2.5/100, 50/100, 97.5/100))
se
modelexp = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
#  tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H#,sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),
values_to = "value",
names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = y)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
modelexp = function() {
# Priors
#sigmaProc ~ dunif (0, 10)
#tauProc = 1 / sigmaProc ^ 2
lambda ~ dunif(0, 5)
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
tauProc[t] = 1 / sigmaProc[t-1] ^ 2
mu[t] = lambda * (N[t-1] - h[t-1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc[t])
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(
nyears = nrow(dat),
y = dat$N,
h = dat$H,
sigmaProc = c(se$se,100)
)
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
knitr::opts_chunk$set(echo = TRUE)
library(R2jags)
library(tidyverse)
model = function() {
#--------------------------------------
# Parameters:
# phi: survival probability
# gamma: removal entry probability
# p: capture probability
#--------------------------------------
# States (S):
# 1 not yet entered
# 2 alive
# 3 dead
# Observations (O):
# 1 seen
# 2 not seen
#--------------------------------------
# Priors and constraints
for (t in 1:(n.occasions-1)){
phi[t] <- mean.phi
gamma[t] ~ dunif(0, 1) # Prior for entry probabilities
p[t] <- mean.p
}
mean.phi ~ dunif(0, 1)    # Prior for mean survival
mean.p ~ dunif(0, 1)      # Prior for mean capture
# Define state-transition and observation matrices
for (i in 1:M){
# Define probabilities of state S(t+1) given S(t)
for (t in 1:(n.occasions-1)){
ps[1,i,t,1] <- 1-gamma[t]
ps[1,i,t,2] <- gamma[t]
ps[1,i,t,3] <- 0
ps[2,i,t,1] <- 0
ps[2,i,t,2] <- phi[t]
ps[2,i,t,3] <- 1-phi[t]
ps[3,i,t,1] <- 0
ps[3,i,t,2] <- 0
ps[3,i,t,3] <- 1
# Define probabilities of O(t) given S(t)
po[1,i,t,1] <- 0
po[1,i,t,2] <- 1
po[2,i,t,1] <- p[t]
po[2,i,t,2] <- 1-p[t]
po[3,i,t,1] <- 0
po[3,i,t,2] <- 1
} #t
} #i
# Likelihood
for (i in 1:M){
# Define latent state at first occasion
z[i,1] <- 1   # Make sure that all M individuals are in state 1 at t=1
for (t in 2:n.occasions){
# State process: draw S(t) given S(t-1)
z[i,t] ~ dcat(ps[z[i,t-1], i, t-1,])
# Observation process: draw O(t) given S(t)
y[i,t] ~ dcat(po[z[i,t], i, t-1,])
} #t
} #i
# Calculate derived population parameters
for (t in 1:(n.occasions-1)){
qgamma[t] <- 1-gamma[t]
}
cprob[1] <- gamma[1]
for (t in 2:(n.occasions-1)){
cprob[t] <- gamma[t] * prod(qgamma[1:(t-1)])
} #t
psi <- sum(cprob[])            # Inclusion probability
for (t in 1:(n.occasions-1)){
b[t] <- cprob[t] / psi      # Entry probability
} #t
for (i in 1:M){
for (t in 2:n.occasions){
al[i,t-1] <- equals(z[i,t], 2)
} #t
for (t in 1:(n.occasions-1)){
d[i,t] <- equals(z[i,t]-al[i,t],0)
} #t
alive[i] <- sum(al[i,])
} #i
for (t in 1:(n.occasions-1)){
N[t] <- sum(al[,t])        # Actual population size
B[t] <- sum(d[,t])         # Number of entries
} #t
for (i in 1:M){
w[i] <- 1-equals(alive[i],0)
} #i
Nsuper <- sum(w[])            # Superpopulation size
}
n.occasions <- 3                        # Number of capture occasions
N <- 400                                 # Superpopulation size
phi <- rep(0.7, n.occasions-1)           # Survival probabilities
b <- c(0.34, rep(0.11, n.occasions-1))   # Entry probabilities
p <- rep(0.5, n.occasions)               # Capture probabilities
PHI <- matrix(rep(phi, (n.occasions-1)*N), ncol = n.occasions-1, nrow = N, byrow = T)
P <- matrix(rep(p, n.occasions*N), ncol = n.occasions, nrow = N, byrow = T)
simul.js <- function(PHI, P, b, N){
B <- rmultinom(1, N, b) # Generate no. of entering ind. per occasion
n.occasions <- dim(PHI)[2] + 1
CH.sur <- CH.p <- matrix(0, ncol = n.occasions, nrow = N)
# Define a vector with the occasion of entering the population
ent.occ <- numeric()
for (t in 1:n.occasions){
ent.occ <- c(ent.occ, rep(t, B[t]))
}
# Simulating survival
for (i in 1:N){
CH.sur[i, ent.occ[i]] <- 1   # Write 1 when ind. enters the pop.
if (ent.occ[i] == n.occasions) next
for (t in (ent.occ[i]+1):n.occasions){
# Bernoulli trial: has individual survived occasion?
sur <- rbinom(1, 1, PHI[i,t-1])
ifelse (sur==1, CH.sur[i,t] <- 1, break)
} #t
} #i
# Simulating capture
for (i in 1:N){
CH.p[i,] <- rbinom(n.occasions, 1, P[i,])
} #i
# Full capture-recapture matrix
CH <- CH.sur * CH.p
# Remove individuals never captured
cap.sum <- rowSums(CH)
never <- which(cap.sum == 0)
CH <- CH[-never,]
Nt <- colSums(CH.sur)    # Actual population size
return(list(CH=CH, B=B, N=Nt))
}
sim <- simul.js(PHI, P, b, N)
CH <- sim$CH
CH
# Add dummy occasion
CH.du <- cbind(rep(0, dim(CH)[1]), CH)
my.z.init <- CH.du
first.one <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) min(which(x == 1)))
last.one  <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) max(which(x == 1)))
for(i in 1:nrow(my.z.init)) {
my.z.init[i, first.one[i]  : last.one[i]] = 2
# 2 indique que l'on est sûr que l'individu est vivant
if(first.one[i] > 1) my.z.init[i,1  : (first.one[i] - 1) ] = 1
# 1 indique que l'on n'a toujours pas observé l'individu (pas observé ou pas encore né)
if(last.one[i] < ncol(my.z.init)) my.z.init[i, (last.one[i] + 1) : ncol(my.z.init)    ] = 3
# 3 indique que l'on n'observe plus l'individu (pas observé ou mort)
}
# Augment data
nz <- 150
CH.ms <- rbind(CH.du, matrix(0, ncol = dim(CH.du)[2], nrow = nz))
# Recode CH matrix: a 0 is not allowed in WinBUGS!
CH.ms[CH.ms==0] <- 2                     # Not seen = 2, seen = 1
my.z.init.ms <- rbind(my.z.init, matrix(0, ncol = dim(my.z.init)[2], nrow = nz))
my.z.init.ms[my.z.init.ms==0] <- 1
# Initialisation des données
bugs.data = list(n.occasions = dim(CH.ms)[2],
y = CH.ms,
M = dim(CH.ms)[1])
# Parameters JAGS
bugs.monitor = c("mean.p", "mean.phi", "b", "Nsuper", "N", "B")
bugs.chains = 2
bugs.inits = function() {
list(mean.phi = runif(1, 0, 1),
mean.p = runif(1, 0, 1),
z = cbind(rep(NA, dim(my.z.init.ms)[1]), my.z.init.ms[,-1]))
}
# Lancement du modèle
modelCMR = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model,
n.chains = bugs.chains,
n.thin=1,
n.iter=2000,
n.burnin=500)
print(js.ms, digits = 3)
print(modelCMR, digits = 3)
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CMR=readRDS("CMR/dat/cmrlouphiver.rds")
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CH=readRDS("CMR/dat/cmrlouphiver.rds")
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CH=readRDS("CMR/dat/cmrlouphiver.rds")
colnames(CMR) = seq(1996,2017)
n.occasions = ncol(CMR)
CH=as.data.frame(CMR)
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CH=readRDS("CMR/dat/cmrlouphiver.rds")
colnames(CMR) = seq(1996,2017)
CH=as.data.frame(CMR)
CH
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CH=readRDS("CMR/dat/cmrlouphiver.rds")
colnames(CMR) = seq(1996,2017)
CH=as.data.frame(CMR)
n.occasions = dim(CH)[2]
n.occasions
n.occasions <- 7                        # Number of capture occasions
N <- 400                                 # Superpopulation size
phi <- rep(0.7, n.occasions-1)           # Survival probabilities
b <- c(0.34, rep(0.11, n.occasions-1))   # Entry probabilities
p <- rep(0.5, n.occasions)               # Capture probabilities
PHI <- matrix(rep(phi, (n.occasions-1)*N), ncol = n.occasions-1, nrow = N, byrow = T)
P <- matrix(rep(p, n.occasions*N), ncol = n.occasions, nrow = N, byrow = T)
simul.js <- function(PHI, P, b, N){
B <- rmultinom(1, N, b) # Generate no. of entering ind. per occasion
n.occasions <- dim(PHI)[2] + 1
CH.sur <- CH.p <- matrix(0, ncol = n.occasions, nrow = N)
# Define a vector with the occasion of entering the population
ent.occ <- numeric()
for (t in 1:n.occasions){
ent.occ <- c(ent.occ, rep(t, B[t]))
}
# Simulating survival
for (i in 1:N){
CH.sur[i, ent.occ[i]] <- 1   # Write 1 when ind. enters the pop.
if (ent.occ[i] == n.occasions) next
for (t in (ent.occ[i]+1):n.occasions){
# Bernoulli trial: has individual survived occasion?
sur <- rbinom(1, 1, PHI[i,t-1])
ifelse (sur==1, CH.sur[i,t] <- 1, break)
} #t
} #i
# Simulating capture
for (i in 1:N){
CH.p[i,] <- rbinom(n.occasions, 1, P[i,])
} #i
# Full capture-recapture matrix
CH <- CH.sur * CH.p
# Remove individuals never captured
cap.sum <- rowSums(CH)
never <- which(cap.sum == 0)
CH <- CH[-never,]
Nt <- colSums(CH.sur)    # Actual population size
return(list(CH=CH, B=B, N=Nt))
}
sim <- simul.js(PHI, P, b, N)
CH <- sim$CH
# Add dummy occasion
CH.du <- cbind(rep(0, dim(CH)[1]), CH)
my.z.init <- CH.du
first.one <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) min(which(x == 1)))
last.one  <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) max(which(x == 1)))
for(i in 1:nrow(my.z.init)) {
my.z.init[i, first.one[i]  : last.one[i]] = 2
# 2 indique que l'on est sûr que l'individu est vivant
if(first.one[i] > 1) my.z.init[i,1  : (first.one[i] - 1) ] = 1
# 1 indique que l'on n'a toujours pas observé l'individu (pas observé ou pas encore né)
if(last.one[i] < ncol(my.z.init)) my.z.init[i, (last.one[i] + 1) : ncol(my.z.init)    ] = 3
# 3 indique que l'on n'observe plus l'individu (pas observé ou mort)
}
# Augment data
nz <- 150
CH.ms <- rbind(CH.du, matrix(0, ncol = dim(CH.du)[2], nrow = nz))
# Recode CH matrix: a 0 is not allowed in WinBUGS!
CH.ms[CH.ms==0] <- 2                     # Not seen = 2, seen = 1
my.z.init.ms <- rbind(my.z.init, matrix(0, ncol = dim(my.z.init)[2], nrow = nz))
my.z.init.ms[my.z.init.ms==0] <- 1
# Initialisation des données
bugs.data = list(n.occasions = dim(CH.ms)[2],
y = CH.ms,
M = dim(CH.ms)[1])
# Parameters JAGS
bugs.monitor = c("mean.p", "mean.phi", "b", "Nsuper", "N", "B")
bugs.chains = 2
bugs.inits = function() {
list(mean.phi = runif(1, 0, 1),
mean.p = runif(1, 0, 1),
z = cbind(rep(NA, dim(my.z.init.ms)[1]), my.z.init.ms[,-1]))
}
# Lancement du modèle
modelCMR = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model,
n.chains = bugs.chains,
n.thin=1,
n.iter=2000,
n.burnin=500)
print(modelCMR, digits = 3)
setwd("/media/loic/Commun/Travail/Stage CEFE 2024/Wolf_Model")
CH=readRDS("CMR/dat/cmrlouphiver.rds")
colnames(CMR) = seq(1996,2017)
CH=as.data.frame(CMR)
n.occasions = dim(CH)[2]
# Add dummy occasion
CH.du <- cbind(rep(0, dim(CH)[1]), CH)
names(CH.du)[1]="dummy"
my.z.init <- CH.du
first.one <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) min(which(x == 1)))
last.one  <- apply(my.z.init[,1:ncol(CH.du)], 1, function(x) max(which(x == 1)))
for(i in 1:nrow(my.z.init)) {
my.z.init[i, first.one[i]  : last.one[i]] = 2                           # 2 indique que l'on est sûr que l'individu est vivant
if(first.one[i] > 1) my.z.init[i,1  : (first.one[i] - 1) ] = 1          # 1 indique que l'on n'a toujours pas observé l'individu (pas observé ou pas encore né)
if(last.one[i] < ncol(my.z.init)) my.z.init[i, (last.one[i] + 1) : ncol(my.z.init)    ] = 3 # 3 indique que l'on n'observe plus l'individu (pas observé ou mort)
}
# Augment data
nz <- 150
aug = matrix(0, ncol = dim(CH.du)[2], nrow = nz)
aug = as.data.frame(aug)
colnames(aug) = c("dummy",seq(1996,2017))
CH.ms <- rbind.data.frame(CH.du, aug)
# Recode CH matrix: a 0 is not allowed in WinBUGS!
CH.ms[CH.ms==0] <- 2                     # Not seen = 2, seen = 1
# Il y avait déjà des 2 dans les données, indiquant qu'un individu est mort.
# Cette information supplémentaire est mise de côté pour le moment
my.z.init.ms <- rbind.data.frame(my.z.init, aug)
my.z.init.ms[my.z.init.ms==0] <- 1
# Initialisation des données
bugs.data = list(n.occasions = dim(CH.ms)[2],
y = CH.ms,
M = dim(CH.ms)[1])
# Parameters JAGS
bugs.monitor = c("mean.p", "mean.phi", "b", "Nsuper", "N", "B")
bugs.chains = 2
bugs.inits = function() {
list(mean.phi = runif(1, 0, 1),
mean.p = runif(1, 0, 1),
z = cbind(rep(NA, dim(my.z.init.ms)[1]), my.z.init.ms[,-1]))
}
# Lancement du modèle
modelCMR = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = model,
n.chains = bugs.chains,
n.thin=1,
n.iter=2000,
n.burnin=500)
