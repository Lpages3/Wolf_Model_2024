# Process model
for (t in 2:(nyears)) {
mu[t] = lambda * (N[t - 1] - h[t - 1])
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:nyears) {
y[t] ~ dpois(N[t])
}
# Projected model
for (t in (nyears + 1):(nyears + 2)) {
mu[t] = (lambda - dH) * N[t - 1]
NProc[t] = log(max(1, mu[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nyears,
y = c(CMRi[[i]]$N, rep(NA, 2)),
dH = dH[i],
h = harvest
)
# Paramètres jags
bugs.monitor = c("lambda", "sigmaProc", "N", "tauProc")
bugs.chains = 3
bugs.inits = function() {
list()
}
# Lancement du modèle
wolf_modelexp = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modelexp,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modelexp$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
output = output1 %>% left_join(output2) %>%
left_join(output3) %>%
left_join(output4) %>%
pivot_longer(
c(medianN1, medianN2, medianN3, medianN4),
names_to = "medianN",
values_to = "valuesM")
variable_names <- list(
"medianN1" = "Harvest : 0%" ,
"medianN2" = "Harvest : 10%",
"medianN3" = "Harvest : 20%",
"medianN4" = "Harvest : 30%")
variable_labeller <- function(variable, value) {
return(variable_names[value])
}
ggplot(output)+
geom_point(aes(x = years, y = ObsY)) +
coord_cartesian(xlim=c(1996,2018),ylim=c(0,700))+
aes(x = years, y = valuesM)+
geom_line(colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq1, ymax = hq1), fill = "red", alpha = 0.3)+
facet_wrap(~medianN,labeller = variable_labeller)+
theme_bw()+
labs(title = "Estimated and projected population size for each harest rate",
x = "Years",
y = "Number of wolves")
dH = c(0, 0.10, 0.20, 0.30)
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 5)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 1000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
#Projected population
for (t in (nyears+1):(nyears+2)) {
u[t-1] = (1-dH) * N[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nyears,
y = c(CMRi[[i+4]]$N, rep(NA, 2)),
dH = dH[i],
h = harvest
)
# Paramètres jags
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
# Lancement du modèle
wolf_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
output = output1 %>% left_join(output2) %>%
left_join(output3) %>%
left_join(output4) %>%
pivot_longer(
c(medianN1, medianN2, medianN3, medianN4),
names_to = "medianN",
values_to = "valuesM")
variable_names <- list(
"medianN1" = "Harvest : 0%" ,
"medianN2" = "Harvest : 10%",
"medianN3" = "Harvest : 20%",
"medianN4" = "Harvest : 30%")
variable_labeller <- function(variable, value) {
return(variable_names[value])
}
ggplot(output)+
geom_point(aes(x = years, y = ObsY)) +
coord_cartesian(xlim=c(1996,2018),ylim=c(0,700))+
aes(x = years, y = valuesM)+
geom_line(colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq1, ymax = hq1), fill = "red", alpha = 0.3)+
facet_wrap(~medianN,labeller = variable_labeller)+
theme_bw()+
labs(title = "Estimated and projected population size for each harest rate",
x = "Years",
y = "Number of wolves")
wolf_modelexp$BUGSoutput$sims.list$lambda
wolf_modelexp$BUGSoutput$mean$lambda
knitr::opts_chunk$set(echo = TRUE)
CMR <- c(17.1,35.4,47.7,25.1,62.6,47.9,81.7,110.5,102.7,135.9,132.6,101.7,130.3,
141.4,141.5,175.5,210.3,174.5,353.6,280.2,376.7,561.2,571.9,682.4,645.7,783.8,868)
plot(CMR)
harvest <- c(0,0,0,0,0,1,0,0,2,1,2,0,0,1,0,4,4,6,18,36,34,42,51,98,105,103,169)
ObsSE = rep(0.3, nyears)
se = read_csv("se.csv",
show_col_types = FALSE,
col_names = c("years", "lq", "N", "hq")) %>%
reframe(se = (hq - N) / 1.96)
dat <- cbind(round(CMR), ObsSE, harvest[1:nyears])
colnames(dat) <- c("N", "se", "H")
dat <- as.data.frame(dat)
nyears <- nrow(dat)
dat
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 10000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(nyears = nrow(dat),
y = dat$N,
h = dat$H)
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
wolf_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=50000,
n.burnin=10000)
print(wolf_modellogist, intervals = c(2.5/100, 50/100, 97.5/100))
wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = dat$N)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
dH = c(0, 0.10, 0.20, 0.30)
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 5)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 2000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
#Projected population
for (t in (nyears+1):(nyears+2)) {
u[t-1] = (1-dH) * N[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
}
for (i in 1:4) {
# Initialisation des données
bugs.data = list(
nyears = nrow(dat),
y = c(dat$N, rep(NA, 2)),
dH = dH[i],
h = dat$H
)
# Paramètres jags
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
# Lancement du modèle
wolf_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=100000,
n.burnin=50000)
if (i==1){
output1 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter1") %>%
filter(str_detect(parameter1, "N")) %>%
group_by(parameter1) %>%
summarize(medianN1 = median(value),
lq1 = quantile(value, probs = 2.5/100),
hq1 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter1) + 1995)%>%
arrange(years)%>%
mutate(ObsY = bugs.data$y)
}
if(i==2){
output2 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter2") %>%
filter(str_detect(parameter2, "N")) %>%
group_by(parameter2) %>%
summarize(medianN2 = median(value),
lq2 = quantile(value, probs = 2.5/100),
hq2 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter2) + 1995)%>%
arrange(years)
}
if(i==3){
output3 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter3") %>%
filter(str_detect(parameter3, "N")) %>%
group_by(parameter3) %>%
summarize(medianN3 = median(value),
lq3 = quantile(value, probs = 2.5/100),
hq3 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter3) + 1995)%>%
arrange(years)
}
if(i==4){
output4 = wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter4") %>%
filter(str_detect(parameter4, "N")) %>%
group_by(parameter4) %>%
summarize(medianN4 = median(value),
lq4 = quantile(value, probs = 2.5/100),
hq4 = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter4) + 1995)%>%
arrange(years)
}
}
output = output1 %>% left_join(output2) %>%
left_join(output3) %>%
left_join(output4) %>%
pivot_longer(
c(medianN1, medianN2, medianN3, medianN4),
names_to = "medianN",
values_to = "valuesM")
variable_names <- list(
"medianN1" = "Harvest : 0%" ,
"medianN2" = "Harvest : 10%",
"medianN3" = "Harvest : 20%",
"medianN4" = "Harvest : 30%")
variable_labeller <- function(variable, value) {
return(variable_names[value])
}
ggplot(output)+
geom_point(aes(x = years, y = ObsY)) +
coord_cartesian(xlim=c(1996,2023),ylim=c(0,1250))+
aes(x = years, y = valuesM)+
geom_line(colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq1, ymax = hq1), fill = "red", alpha = 0.3)+
facet_wrap(~medianN,labeller = variable_labeller)+
theme_bw()+
labs(title = "Estimated and projected population size for each harest rate",
x = "Years",
y = "Number of wolves")
wolf_modellogist$BUGSoutput$mean$K
modellogist = function() {
# Priors
sigmaProc ~ dunif (0, 10)
tauProc = 1 / sigmaProc ^ 2
alpha ~ dunif(0, 1.0986) #maximum exponential growth rate
K ~ dunif(1, 2000)         #carrying capacity
N[1] ~ dgamma(1.0E-6, 1.0E-6)
# Process model
for (t in 2:(nyears)) {
u[t-1] = N[t-1] - h[t-1]
Er[t] = exp(alpha * (1 - u[t-1] / K)) # per capita growth rate is density dependent - Ricker model
lambda[t] = u[t-1] * Er[t]
NProc[t] = log(max(1, lambda[t]))
N[t] ~ dlnorm(NProc[t], tauProc)
}
# Observation model
for (t in 1:(nyears)) {
y[t] ~ dpois(N[t])
}
}
bugs.data = list(nyears = nrow(dat),
y = dat$N,
h = dat$H)
bugs.monitor = c("alpha", "sigmaProc", "tauProc", "K", "N")
bugs.chains = 3
init1 = list(alpha = .5, sigmaProc = .25)
init2 = list(alpha = .1, sigmaProc = .05)
init3 = list(alpha = 1, sigmaProc = .45)
bugs.inits = list(init1, init2, init3)
wolf_modellogist = jags(data = bugs.data,
inits = bugs.inits,
parameters.to.save = bugs.monitor,
model.file = modellogist,
n.chains = bugs.chains,
n.thin=10,
n.iter=50000,
n.burnin=10000)
print(wolf_modellogist, intervals = c(2.5/100, 50/100, 97.5/100))
wolf_modellogist$BUGSoutput$sims.matrix %>%
as_tibble() %>%
pivot_longer(cols = everything(),  values_to = "value", names_to = "parameter") %>%
filter(str_detect(parameter, "N")) %>%
group_by(parameter) %>%
summarize(medianN = median(value),
lq = quantile(value, probs = 2.5/100),
hq = quantile(value, probs = 97.5/100))%>%
mutate(years = parse_number(parameter) + 1995)%>%
arrange(years)%>%
ggplot()+
geom_line(aes(x = years, y = medianN), colour = "red", lty = "dashed")+
geom_ribbon(aes(x = years, ymin = lq, ymax = hq), fill = "red", alpha = 0.3)+
geom_point(data = bugs.data %>% as_tibble, aes(x = 1995 + 1:unique(nyears), y = dat$N)) +
coord_cartesian(xlim=c(1996,2022),ylim=c(0,1250))+
theme_bw()+
labs(title = "Estimated population size",
subtitle = "Observed population size (black dots)",
x = "Years",
y = "Number of wolves")
CMR <- c(17.1,35.4,47.7,25.1,62.6,47.9,81.7,110.5,102.7,135.9,132.6,101.7,130.3,
141.4,141.5,175.5,210.3,174.5,353.6,280.2,376.7,561.2,571.9,682.4,645.7,783.8,868)
harvest <- c(0,0,0,0,0,1,0,0,2,1,2,0,0,1,0,4,4,6,18,36,34,42,51,98,105,103,169)
length(harvest)
